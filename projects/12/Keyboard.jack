// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */

class Keyboard {
    static int address;
    static int readBufSize;

    /** Initializes the keyboard. */
    function void init() {
        let address = 24576;
        let readBufSize = 100;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        var char c;
        let c = Memory.peek(address);
        if (c > 0) {
            return c;
        }
        return 0;
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char key;
        while (Keyboard.keyPressed() = 0) {
            // do nothing
        }
        let key = Keyboard.keyPressed();
        while (Keyboard.keyPressed() = key) {
            // key is held
        }
        if (key = String.newLine()) { 
            return key;
        }
        if (key = String.backSpace()) { 
            return key;
        }
        do Output.printChar(key);
        return key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String s;
        var int c;
        let s = String.new(readBufSize);
        do Output.printString(message);
        do Output.println();
        while (~(s.length() = readBufSize)) {
            let c = Keyboard.readChar();
            if (c = String.newLine()) {
                do Output.println();
                do Output.printString(s);
                return s;
            }
            if ((c = String.backSpace()) & (s.length() > 0)) { 
                do s.eraseLastChar();
                do Output.backSpace();

            }
            else { 
                do s.appendChar(c);
            }
        }
        do Output.println();
        do Output.printString(s);
        return s;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String s;
        var int c;
        let s = String.new(readBufSize);

        do Output.printString(message);
        do Output.println();
        while (~(s.length() = readBufSize)) {
            let c = Keyboard.readChar();
            if ((c = String.backSpace()) & (s.length() > 0)) { 
                do Output.backSpace();
                do s.eraseLastChar();
            }
            else { 
                if (((c > 47) & (c < 58)) | ((c = 45) & (s.length() = 0))) {
                    do s.appendChar(c);
                }
                else {
                    do Output.println();
                    do Output.printString(s);
                    do Output.println();
                    return s.intValue();
                }
            }
        }            
        do Output.println();
        do Output.printString(s);
        do Output.println();
        return s.intValue();
    }
}
