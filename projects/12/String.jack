// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */

class String {
    field Array str;
    field int length;
    field int maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(maxLength);
        let length = 0;
        let maxLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        do setCharAt(length, c);
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, d, i;
        let val = 0;

        while (i < length) {
            if (isDigit(str[i])) {
                let val = val * 10 + str[i];
                let i = i + 1;
            }
            else {
                return val;
            }
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        do int2String(val);
    }

    /** Returns the new line character. */
    function char newLine() {
        // Hack computer standard says use 128 for backspace
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        // Hack computer standard says use 129 for newline
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        // ASCII code
        return 34;
    }

    /* Convert a string to int value */
    method String int2String(int val) {
        var int c, tmp;
        let c = val - (val / 10 * 10); // val % 10 equivalent

        if (val < 10) {
            return this.appendChar(c);
        }
        else { 
            // TODO: Compile error: return int2String(val / 10).appendChar(c)
            // Bug in compiler or invalid Jack grammar?
            let tmp = int2String(val / 10);
            return tmp.appendChar(c);
        }
    }

    function boolean isDigit(char c) {
        return (c > 47 & c < 58);
    }
}
